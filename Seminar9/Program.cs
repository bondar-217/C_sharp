// //Задача 1. Задайте значение N. Напишите программу, которая выведет все натуральные числа в промежутке от 1 до N.

// //N = 5 -> "1, 2, 3, 4, 5"
// //N = 6 -> "1, 2, 3, 4, 5, 6"

// void ShowNumbers(int n)
// {
//     if (n >= 1)
//     {

//         ShowNumbers(n - 1);
//         Console.Write(n + "  ");
//     }
// }

// ShowNumbers(5);

//Задание 2. Напишите программу, которая будет принимать на вход число и возвращать сумму его цифр.

// int FindSum(int num)
// {
//     if (num > 0)
//     {
//         return FindSum(num / 10) + num % 10;
//     }
//     else
//         return num;
// }

// Console.WriteLine(FindSum(377));


//Задача 3. Задайте значения M и N. Напишите программу, которая выведет все натуральные числа в промежутке от M до N.

//M = 1; N = 5. -> "1, 2, 3, 4, 5"
//M = 4; N = 8. -> "4, 5, 6, 7, 8"



// void ShowNumbers(int m, int n)
// {
//     if (n != m)
//     {
//         if (n > m)
//         {
//             // Console.Write(n + " ");
//             ShowNumbers(m, n - 1);
//             Console.Write(n + " ");
//         }
//         else
//         {
//             Console.Write(n + " ");
//             ShowNumbers(m, n + 1);
//             // Console.Write(n + " ");
//         }
//     }
//     else
//         Console.Write(n + " ");
// }

// ShowNumbers(5, 1);


//Задача 4.Напишите программу, которая на вход принимает два числа A и B, и возводит число А в целую степень B с помощью рекурсии.

//A = 3; B = 5 -> 243 (3⁵)
//A = 2; B = 3 -> 8

// int FindStepen(int a, int b)
// {
//     if (b > 1)
//     {
//         return FindStepen(a, b - 1) * a;
//     }
//     else
//         return a;
// }

// Console.WriteLine(FindStepen(2, 3));


// Задача 64: Задайте значение N. Напишите программу, которая выведет все натуральные числа в промежутке от N до 1. Выполнить с помощью рекурсии.
// N = 5 -> "5, 4, 3, 2, 1"
// N = 8 -> "8, 7, 6, 5, 4, 3, 2, 1"

// void ShowNumbers(int n)
// {
//     if (n >= 1)
//     {
//         Console.Write(n + " ");
//         ShowNumbers(n - 1);
//     }
// }

// ShowNumbers(8);

// // Задача 66: Задайте значения M и N. Напишите программу, которая найдёт сумму натуральных элементов в промежутке от M до N.
// // M = 1; N = 15 -> 120
// // M = 4; N = 8. -> 30

// // Запрос на ввод числа m от пользователя
// Console.Write("Введите число m: ");
// // Считывание и преобразование введенного значения в целочисленный тип
// int m = Convert.ToInt32(Console.ReadLine());

// // Запрос на ввод числа n от пользователя
// Console.Write("Введите число n: ");
// // Считывание и преобразование введенного значения в целочисленный тип
// int n = Convert.ToInt32(Console.ReadLine());

// // Вызов функции для расчета суммы чисел от m до n
// CalculateSum(m, n);

// // Функция для вызова рекурсивного расчета суммы чисел от m до n
// void CalculateSum(int m, int n)
// {
//     // Вывод результата, полученного от функции RecursiveSum
//     Console.Write(RecursiveSum(m - 1, n));
// }

// // Рекурсивная функция для расчета суммы чисел от m до n
// int RecursiveSum(int m, int n)
// {
//     // Инициализация переменной res значением m
//     int res = m;
//     // Проверка условия: если m >= n, то возвращаем 0 (базовый случай рекурсии)
//     if (m >= n)
//         return 0;
//     else
//     {
//         // Увеличение значения m на 1
//         m++;
//         // Расчет суммы текущего значения m и результата следующего вызова рекурсивной функции
//         res = m + RecursiveSum(m, n);
//         // Возврат полученного результата
//         return res;
//     }
// }



// Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
// m = 2, n = 3 -> A(m,n) = 9
// m = 3, n = 2 -> A(m,n) = 29
// Запрос на ввод числа m от пользователя
// Console.Write("Введите число M: ");
// // Считывание и преобразование введенного значения в целочисленный тип
// int m = Convert.ToInt32(Console.ReadLine());

// // Запрос на ввод числа n от пользователя
// Console.Write("Введите число N: ");
// // Считывание и преобразование введенного значения в целочисленный тип
// int n = Convert.ToInt32(Console.ReadLine());

// // Вызов функции вычисления функции Аккермана
// ComputeAkkerman(m, n);

// // Функция для вызова рекурсивного расчета функции Аккермана
// void ComputeAkkerman(int m, int n)
// {
//     // Вывод результата, полученного от функции AkkermanRecursion
//     Console.Write(AkkermanRecursion(m, n));
// }

// // Рекурсивная функция для расчета функции Аккермана
// int AkkermanRecursion(int m, int n)
// {
//     // Если m равно 0, возвращаем n + 1
//     if (m == 0)
//     {
//         return n + 1;
//     }
//     // Если n равно 0 и m больше 0, вызываем функцию AkkermanRecursion с m - 1 и 1
//     else if (n == 0 && m > 0)
//     {
//         return AkkermanRecursion(m - 1, 1);
//     }
//     // В остальных случаях вызываем функцию AkkermanRecursion с m - 1 и результатом вызова AkkermanRecursion с m и n - 1
//     else
//     {
//         return (AkkermanRecursion(m - 1, AkkermanRecursion(m, n - 1)));
//     }
// }




